"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@wojtekmaj";
exports.ids = ["vendor-chunks/@wojtekmaj"];
exports.modules = {

/***/ "(ssr)/../node_modules/@wojtekmaj/date-utils/dist/esm/index.js":
/*!***************************************************************!*\
  !*** ../node_modules/@wojtekmaj/date-utils/dist/esm/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCenturyEnd: () => (/* binding */ getCenturyEnd),\n/* harmony export */   getCenturyRange: () => (/* binding */ getCenturyRange),\n/* harmony export */   getCenturyStart: () => (/* binding */ getCenturyStart),\n/* harmony export */   getDate: () => (/* binding */ getDate),\n/* harmony export */   getDayEnd: () => (/* binding */ getDayEnd),\n/* harmony export */   getDayRange: () => (/* binding */ getDayRange),\n/* harmony export */   getDayStart: () => (/* binding */ getDayStart),\n/* harmony export */   getDaysInMonth: () => (/* binding */ getDaysInMonth),\n/* harmony export */   getDecadeEnd: () => (/* binding */ getDecadeEnd),\n/* harmony export */   getDecadeRange: () => (/* binding */ getDecadeRange),\n/* harmony export */   getDecadeStart: () => (/* binding */ getDecadeStart),\n/* harmony export */   getHours: () => (/* binding */ getHours),\n/* harmony export */   getHoursMinutes: () => (/* binding */ getHoursMinutes),\n/* harmony export */   getHoursMinutesSeconds: () => (/* binding */ getHoursMinutesSeconds),\n/* harmony export */   getISOLocalDate: () => (/* binding */ getISOLocalDate),\n/* harmony export */   getISOLocalDateTime: () => (/* binding */ getISOLocalDateTime),\n/* harmony export */   getISOLocalMonth: () => (/* binding */ getISOLocalMonth),\n/* harmony export */   getMilliseconds: () => (/* binding */ getMilliseconds),\n/* harmony export */   getMinutes: () => (/* binding */ getMinutes),\n/* harmony export */   getMonth: () => (/* binding */ getMonth),\n/* harmony export */   getMonthEnd: () => (/* binding */ getMonthEnd),\n/* harmony export */   getMonthHuman: () => (/* binding */ getMonthHuman),\n/* harmony export */   getMonthRange: () => (/* binding */ getMonthRange),\n/* harmony export */   getMonthStart: () => (/* binding */ getMonthStart),\n/* harmony export */   getNextCenturyEnd: () => (/* binding */ getNextCenturyEnd),\n/* harmony export */   getNextCenturyStart: () => (/* binding */ getNextCenturyStart),\n/* harmony export */   getNextDayEnd: () => (/* binding */ getNextDayEnd),\n/* harmony export */   getNextDayStart: () => (/* binding */ getNextDayStart),\n/* harmony export */   getNextDecadeEnd: () => (/* binding */ getNextDecadeEnd),\n/* harmony export */   getNextDecadeStart: () => (/* binding */ getNextDecadeStart),\n/* harmony export */   getNextMonthEnd: () => (/* binding */ getNextMonthEnd),\n/* harmony export */   getNextMonthStart: () => (/* binding */ getNextMonthStart),\n/* harmony export */   getNextYearEnd: () => (/* binding */ getNextYearEnd),\n/* harmony export */   getNextYearStart: () => (/* binding */ getNextYearStart),\n/* harmony export */   getPreviousCenturyEnd: () => (/* binding */ getPreviousCenturyEnd),\n/* harmony export */   getPreviousCenturyStart: () => (/* binding */ getPreviousCenturyStart),\n/* harmony export */   getPreviousDayEnd: () => (/* binding */ getPreviousDayEnd),\n/* harmony export */   getPreviousDayStart: () => (/* binding */ getPreviousDayStart),\n/* harmony export */   getPreviousDecadeEnd: () => (/* binding */ getPreviousDecadeEnd),\n/* harmony export */   getPreviousDecadeStart: () => (/* binding */ getPreviousDecadeStart),\n/* harmony export */   getPreviousMonthEnd: () => (/* binding */ getPreviousMonthEnd),\n/* harmony export */   getPreviousMonthStart: () => (/* binding */ getPreviousMonthStart),\n/* harmony export */   getPreviousYearEnd: () => (/* binding */ getPreviousYearEnd),\n/* harmony export */   getPreviousYearStart: () => (/* binding */ getPreviousYearStart),\n/* harmony export */   getSeconds: () => (/* binding */ getSeconds),\n/* harmony export */   getYear: () => (/* binding */ getYear),\n/* harmony export */   getYearEnd: () => (/* binding */ getYearEnd),\n/* harmony export */   getYearRange: () => (/* binding */ getYearRange),\n/* harmony export */   getYearStart: () => (/* binding */ getYearStart)\n/* harmony export */ });\n/**\n * Utils\n */ function makeGetEdgeOfNeighbor(getPeriod, getEdgeOfPeriod, defaultOffset) {\n    return function makeGetEdgeOfNeighborInternal(date, offset) {\n        if (offset === void 0) {\n            offset = defaultOffset;\n        }\n        var previousPeriod = getPeriod(date) + offset;\n        return getEdgeOfPeriod(previousPeriod);\n    };\n}\nfunction makeGetEnd(getBeginOfNextPeriod) {\n    return function makeGetEndInternal(date) {\n        return new Date(getBeginOfNextPeriod(date).getTime() - 1);\n    };\n}\nfunction makeGetRange(getStart, getEnd) {\n    return function makeGetRangeInternal(date) {\n        return [\n            getStart(date),\n            getEnd(date)\n        ];\n    };\n}\n/**\n * Simple getters - getting a property of a given point in time\n */ /**\n * Gets year from a given date.\n *\n * @param {DateLike} date Date to get year from\n * @returns {number} Year\n */ function getYear(date) {\n    if (date instanceof Date) {\n        return date.getFullYear();\n    }\n    if (typeof date === \"number\") {\n        return date;\n    }\n    var year = parseInt(date, 10);\n    if (typeof date === \"string\" && !isNaN(year)) {\n        return year;\n    }\n    throw new Error(\"Failed to get year from date: \".concat(date, \".\"));\n}\n/**\n * Gets month from a given date.\n *\n * @param {Date} date Date to get month from\n * @returns {number} Month\n */ function getMonth(date) {\n    if (date instanceof Date) {\n        return date.getMonth();\n    }\n    throw new Error(\"Failed to get month from date: \".concat(date, \".\"));\n}\n/**\n * Gets human-readable month from a given date.\n *\n * @param {Date} date Date to get human-readable month from\n * @returns {number} Human-readable month\n */ function getMonthHuman(date) {\n    if (date instanceof Date) {\n        return date.getMonth() + 1;\n    }\n    throw new Error(\"Failed to get human-readable month from date: \".concat(date, \".\"));\n}\n/**\n * Gets day of the month from a given date.\n *\n * @param {Date} date Date to get day of the month from\n * @returns {number} Day of the month\n */ function getDate(date) {\n    if (date instanceof Date) {\n        return date.getDate();\n    }\n    throw new Error(\"Failed to get year from date: \".concat(date, \".\"));\n}\n/**\n * Gets hours from a given date.\n *\n * @param {Date | string} date Date to get hours from\n * @returns {number} Hours\n */ function getHours(date) {\n    if (date instanceof Date) {\n        return date.getHours();\n    }\n    if (typeof date === \"string\") {\n        var datePieces = date.split(\":\");\n        if (datePieces.length >= 2) {\n            var hoursString = datePieces[0];\n            if (hoursString) {\n                var hours = parseInt(hoursString, 10);\n                if (!isNaN(hours)) {\n                    return hours;\n                }\n            }\n        }\n    }\n    throw new Error(\"Failed to get hours from date: \".concat(date, \".\"));\n}\n/**\n * Gets minutes from a given date.\n *\n * @param {Date | string} date Date to get minutes from\n * @returns {number} Minutes\n */ function getMinutes(date) {\n    if (date instanceof Date) {\n        return date.getMinutes();\n    }\n    if (typeof date === \"string\") {\n        var datePieces = date.split(\":\");\n        if (datePieces.length >= 2) {\n            var minutesString = datePieces[1] || \"0\";\n            var minutes = parseInt(minutesString, 10);\n            if (!isNaN(minutes)) {\n                return minutes;\n            }\n        }\n    }\n    throw new Error(\"Failed to get minutes from date: \".concat(date, \".\"));\n}\n/**\n * Gets seconds from a given date.\n *\n * @param {Date | string} date Date to get seconds from\n * @returns {number} Seconds\n */ function getSeconds(date) {\n    if (date instanceof Date) {\n        return date.getSeconds();\n    }\n    if (typeof date === \"string\") {\n        var datePieces = date.split(\":\");\n        if (datePieces.length >= 2) {\n            var secondsWithMillisecondsString = datePieces[2] || \"0\";\n            var seconds = parseInt(secondsWithMillisecondsString, 10);\n            if (!isNaN(seconds)) {\n                return seconds;\n            }\n        }\n    }\n    throw new Error(\"Failed to get seconds from date: \".concat(date, \".\"));\n}\n/**\n * Gets milliseconds from a given date.\n *\n * @param {Date | string} date Date to get milliseconds from\n * @returns {number} Milliseconds\n */ function getMilliseconds(date) {\n    if (date instanceof Date) {\n        return date.getMilliseconds();\n    }\n    if (typeof date === \"string\") {\n        var datePieces = date.split(\":\");\n        if (datePieces.length >= 2) {\n            var secondsWithMillisecondsString = datePieces[2] || \"0\";\n            var millisecondsString = secondsWithMillisecondsString.split(\".\")[1] || \"0\";\n            var milliseconds = parseInt(millisecondsString, 10);\n            if (!isNaN(milliseconds)) {\n                return milliseconds;\n            }\n        }\n    }\n    throw new Error(\"Failed to get seconds from date: \".concat(date, \".\"));\n}\n/**\n * Century\n */ /**\n * Gets century start date from a given date.\n *\n * @param {DateLike} date Date to get century start from\n * @returns {Date} Century start date\n */ function getCenturyStart(date) {\n    var year = getYear(date);\n    var centuryStartYear = year + (-year + 1) % 100;\n    var centuryStartDate = new Date();\n    centuryStartDate.setFullYear(centuryStartYear, 0, 1);\n    centuryStartDate.setHours(0, 0, 0, 0);\n    return centuryStartDate;\n}\n/**\n * Gets previous century start date from a given date.\n *\n * @param {DateLike} date Date to get previous century start from\n * @returns {Date} Previous century start date\n */ var getPreviousCenturyStart = makeGetEdgeOfNeighbor(getYear, getCenturyStart, -100);\n/**\n * Gets next century start date from a given date.\n *\n * @param {DateLike} date Date to get next century start from\n * @returns {Date} Next century start date\n */ var getNextCenturyStart = makeGetEdgeOfNeighbor(getYear, getCenturyStart, 100);\n/**\n * Gets century end date from a given date.\n *\n * @param {DateLike} date Date to get century end from\n * @returns {Date} Century end date\n */ var getCenturyEnd = makeGetEnd(getNextCenturyStart);\n/**\n * Gets previous century end date from a given date.\n *\n * @param {DateLike} date Date to get previous century end from\n * @returns {Date} Previous century end date\n */ var getPreviousCenturyEnd = makeGetEdgeOfNeighbor(getYear, getCenturyEnd, -100);\n/**\n * Gets next century end date from a given date.\n *\n * @param {DateLike} date Date to get next century end from\n * @returns {Date} Next century end date\n */ var getNextCenturyEnd = makeGetEdgeOfNeighbor(getYear, getCenturyEnd, 100);\n/**\n * Gets century start and end dates from a given date.\n *\n * @param {DateLike} date Date to get century start and end from\n * @returns {[Date, Date]} Century start and end dates\n */ var getCenturyRange = makeGetRange(getCenturyStart, getCenturyEnd);\n/**\n * Decade\n */ /**\n * Gets decade start date from a given date.\n *\n * @param {DateLike} date Date to get decade start from\n * @returns {Date} Decade start date\n */ function getDecadeStart(date) {\n    var year = getYear(date);\n    var decadeStartYear = year + (-year + 1) % 10;\n    var decadeStartDate = new Date();\n    decadeStartDate.setFullYear(decadeStartYear, 0, 1);\n    decadeStartDate.setHours(0, 0, 0, 0);\n    return decadeStartDate;\n}\n/**\n * Gets previous decade start date from a given date.\n *\n * @param {DateLike} date Date to get previous decade start from\n * @returns {Date} Previous decade start date\n */ var getPreviousDecadeStart = makeGetEdgeOfNeighbor(getYear, getDecadeStart, -10);\n/**\n * Gets next decade start date from a given date.\n *\n * @param {DateLike} date Date to get next decade start from\n * @returns {Date} Next decade start date\n */ var getNextDecadeStart = makeGetEdgeOfNeighbor(getYear, getDecadeStart, 10);\n/**\n * Gets decade end date from a given date.\n *\n * @param {DateLike} date Date to get decade end from\n * @returns {Date} Decade end date\n */ var getDecadeEnd = makeGetEnd(getNextDecadeStart);\n/**\n * Gets previous decade end date from a given date.\n *\n * @param {DateLike} date Date to get previous decade end from\n * @returns {Date} Previous decade end date\n */ var getPreviousDecadeEnd = makeGetEdgeOfNeighbor(getYear, getDecadeEnd, -10);\n/**\n * Gets next decade end date from a given date.\n *\n * @param {DateLike} date Date to get next decade end from\n * @returns {Date} Next decade end date\n */ var getNextDecadeEnd = makeGetEdgeOfNeighbor(getYear, getDecadeEnd, 10);\n/**\n * Gets decade start and end dates from a given date.\n *\n * @param {DateLike} date Date to get decade start and end from\n * @returns {[Date, Date]} Decade start and end dates\n */ var getDecadeRange = makeGetRange(getDecadeStart, getDecadeEnd);\n/**\n * Year\n */ /**\n * Gets year start date from a given date.\n *\n * @param {DateLike} date Date to get year start from\n * @returns {Date} Year start date\n */ function getYearStart(date) {\n    var year = getYear(date);\n    var yearStartDate = new Date();\n    yearStartDate.setFullYear(year, 0, 1);\n    yearStartDate.setHours(0, 0, 0, 0);\n    return yearStartDate;\n}\n/**\n * Gets previous year start date from a given date.\n *\n * @param {DateLike} date Date to get previous year start from\n * @returns {Date} Previous year start date\n */ var getPreviousYearStart = makeGetEdgeOfNeighbor(getYear, getYearStart, -1);\n/**\n * Gets next year start date from a given date.\n *\n * @param {DateLike} date Date to get next year start from\n * @returns {Date} Next year start date\n */ var getNextYearStart = makeGetEdgeOfNeighbor(getYear, getYearStart, 1);\n/**\n * Gets year end date from a given date.\n *\n * @param {DateLike} date Date to get year end from\n * @returns {Date} Year end date\n */ var getYearEnd = makeGetEnd(getNextYearStart);\n/**\n * Gets previous year end date from a given date.\n *\n * @param {DateLike} date Date to get previous year end from\n * @returns {Date} Previous year end date\n */ var getPreviousYearEnd = makeGetEdgeOfNeighbor(getYear, getYearEnd, -1);\n/**\n * Gets next year end date from a given date.\n *\n * @param {DateLike} date Date to get next year end from\n * @returns {Date} Next year end date\n */ var getNextYearEnd = makeGetEdgeOfNeighbor(getYear, getYearEnd, 1);\n/**\n * Gets year start and end dates from a given date.\n *\n * @param {DateLike} date Date to get year start and end from\n * @returns {[Date, Date]} Year start and end dates\n */ var getYearRange = makeGetRange(getYearStart, getYearEnd);\n/**\n * Month\n */ function makeGetEdgeOfNeighborMonth(getEdgeOfPeriod, defaultOffset) {\n    return function makeGetEdgeOfNeighborMonthInternal(date, offset) {\n        if (offset === void 0) {\n            offset = defaultOffset;\n        }\n        var year = getYear(date);\n        var month = getMonth(date) + offset;\n        var previousPeriod = new Date();\n        previousPeriod.setFullYear(year, month, 1);\n        previousPeriod.setHours(0, 0, 0, 0);\n        return getEdgeOfPeriod(previousPeriod);\n    };\n}\n/**\n * Gets month start date from a given date.\n *\n * @param {DateLike} date Date to get month start from\n * @returns {Date} Month start date\n */ function getMonthStart(date) {\n    var year = getYear(date);\n    var month = getMonth(date);\n    var monthStartDate = new Date();\n    monthStartDate.setFullYear(year, month, 1);\n    monthStartDate.setHours(0, 0, 0, 0);\n    return monthStartDate;\n}\n/**\n * Gets previous month start date from a given date.\n *\n * @param {DateLike} date Date to get previous month start from\n * @returns {Date} Previous month start date\n */ var getPreviousMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, -1);\n/**\n * Gets next month start date from a given date.\n *\n * @param {DateLike} date Date to get next month start from\n * @returns {Date} Next month start date\n */ var getNextMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, 1);\n/**\n * Gets month end date from a given date.\n *\n * @param {DateLike} date Date to get month end from\n * @returns {Date} Month end date\n */ var getMonthEnd = makeGetEnd(getNextMonthStart);\n/**\n * Gets previous month end date from a given date.\n *\n * @param {DateLike} date Date to get previous month end from\n * @returns {Date} Previous month end date\n */ var getPreviousMonthEnd = makeGetEdgeOfNeighborMonth(getMonthEnd, -1);\n/**\n * Gets next month end date from a given date.\n *\n * @param {DateLike} date Date to get next month end from\n * @returns {Date} Next month end date\n */ var getNextMonthEnd = makeGetEdgeOfNeighborMonth(getMonthEnd, 1);\n/**\n * Gets month start and end dates from a given date.\n *\n * @param {DateLike} date Date to get month start and end from\n * @returns {[Date, Date]} Month start and end dates\n */ var getMonthRange = makeGetRange(getMonthStart, getMonthEnd);\n/**\n * Day\n */ function makeGetEdgeOfNeighborDay(getEdgeOfPeriod, defaultOffset) {\n    return function makeGetEdgeOfNeighborDayInternal(date, offset) {\n        if (offset === void 0) {\n            offset = defaultOffset;\n        }\n        var year = getYear(date);\n        var month = getMonth(date);\n        var day = getDate(date) + offset;\n        var previousPeriod = new Date();\n        previousPeriod.setFullYear(year, month, day);\n        previousPeriod.setHours(0, 0, 0, 0);\n        return getEdgeOfPeriod(previousPeriod);\n    };\n}\n/**\n * Gets day start date from a given date.\n *\n * @param {DateLike} date Date to get day start from\n * @returns {Date} Day start date\n */ function getDayStart(date) {\n    var year = getYear(date);\n    var month = getMonth(date);\n    var day = getDate(date);\n    var dayStartDate = new Date();\n    dayStartDate.setFullYear(year, month, day);\n    dayStartDate.setHours(0, 0, 0, 0);\n    return dayStartDate;\n}\n/**\n * Gets previous day start date from a given date.\n *\n * @param {DateLike} date Date to get previous day start from\n * @returns {Date} Previous day start date\n */ var getPreviousDayStart = makeGetEdgeOfNeighborDay(getDayStart, -1);\n/**\n * Gets next day start date from a given date.\n *\n * @param {DateLike} date Date to get next day start from\n * @returns {Date} Next day start date\n */ var getNextDayStart = makeGetEdgeOfNeighborDay(getDayStart, 1);\n/**\n * Gets day end date from a given date.\n *\n * @param {DateLike} date Date to get day end from\n * @returns {Date} Day end date\n */ var getDayEnd = makeGetEnd(getNextDayStart);\n/**\n * Gets previous day end date from a given date.\n *\n * @param {DateLike} date Date to get previous day end from\n * @returns {Date} Previous day end date\n */ var getPreviousDayEnd = makeGetEdgeOfNeighborDay(getDayEnd, -1);\n/**\n * Gets next day end date from a given date.\n *\n * @param {DateLike} date Date to get next day end from\n * @returns {Date} Next day end date\n */ var getNextDayEnd = makeGetEdgeOfNeighborDay(getDayEnd, 1);\n/**\n * Gets day start and end dates from a given date.\n *\n * @param {DateLike} date Date to get day start and end from\n * @returns {[Date, Date]} Day start and end dates\n */ var getDayRange = makeGetRange(getDayStart, getDayEnd);\n/**\n * Other\n */ /**\n * Returns a number of days in a month of a given date.\n *\n * @param {Date} date Date\n * @returns {number} Number of days in a month\n */ function getDaysInMonth(date) {\n    return getDate(getMonthEnd(date));\n}\nfunction padStart(num, val) {\n    if (val === void 0) {\n        val = 2;\n    }\n    var numStr = \"\".concat(num);\n    if (numStr.length >= val) {\n        return num;\n    }\n    return \"0000\".concat(numStr).slice(-val);\n}\n/**\n * Returns local hours and minutes (hh:mm).\n *\n * @param {Date | string} date Date to get hours and minutes from\n * @returns {string} Local hours and minutes\n */ function getHoursMinutes(date) {\n    var hours = padStart(getHours(date));\n    var minutes = padStart(getMinutes(date));\n    return \"\".concat(hours, \":\").concat(minutes);\n}\n/**\n * Returns local hours, minutes and seconds (hh:mm:ss).\n *\n * @param {Date | string} date Date to get hours, minutes and seconds from\n * @returns {string} Local hours, minutes and seconds\n */ function getHoursMinutesSeconds(date) {\n    var hours = padStart(getHours(date));\n    var minutes = padStart(getMinutes(date));\n    var seconds = padStart(getSeconds(date));\n    return \"\".concat(hours, \":\").concat(minutes, \":\").concat(seconds);\n}\n/**\n * Returns local month in ISO-like format (YYYY-MM).\n *\n * @param {Date} date Date to get month in ISO-like format from\n * @returns {string} Local month in ISO-like format\n */ function getISOLocalMonth(date) {\n    var year = padStart(getYear(date), 4);\n    var month = padStart(getMonthHuman(date));\n    return \"\".concat(year, \"-\").concat(month);\n}\n/**\n * Returns local date in ISO-like format (YYYY-MM-DD).\n *\n * @param {Date} date Date to get date in ISO-like format from\n * @returns {string} Local date in ISO-like format\n */ function getISOLocalDate(date) {\n    var year = padStart(getYear(date), 4);\n    var month = padStart(getMonthHuman(date));\n    var day = padStart(getDate(date));\n    return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n}\n/**\n * Returns local date & time in ISO-like format (YYYY-MM-DDThh:mm:ss).\n *\n * @param {Date} date Date to get date & time in ISO-like format from\n * @returns {string} Local date & time in ISO-like format\n */ function getISOLocalDateTime(date) {\n    return \"\".concat(getISOLocalDate(date), \"T\").concat(getHoursMinutesSeconds(date));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@wojtekmaj/date-utils/dist/esm/index.js\n");

/***/ })

};
;